#compdef makepkg-bwrap

# This is a workaround for the fact that zsh does not support
# completion well.

typeset -A opt_args
setopt extendedglob

_makepkg_shortopts=(
	'-s[Install missing dependencies with pacman]'
	'-i[Install package after successful build]'
	'-A[Ignore incomplete arch field in PKGBUILD]'
	'-c[Clean up work files after build]'
	'-C[Remove $srcdir/ dir before building the package]'
	'-d[Skip all dependency checks]'
	'-e[Do not extract source files (use existing $srcdir/ dir)]'
	'-f[Overwrite existing package]'
	'-g[Generate integrity checks for source files]'
	'-h[Show help message and exit]'
	'-L[Log package build process]'
	'-m[Disable colorized output messages]'
	'-o[Download and extract files only]'
	'-p[Use an alternate build script (instead of 'PKGBUILD')]: :_files'
	'-r[Remove installed dependencies after a successful build]'
	'-R[Repackage contents of the package without rebuilding]'
	'-S[Generate a source-only tarball without downloading sources]'
	'-V[Show version information and exit]'
)

_makepkg_action_none() {
	_arguments \
		"$_makepkg_shortopts[@]" \
		"$_makepkg_longopts[@]"
}
_makepkg_longopts=(
	'--ignorearch[Ignore incomplete arch field in PKGBUILD]'
	'--clean[Clean up work files after build]'
	'--cleanbuild[Remove $srcdir/ dir before building the package]'
	'--nodeps[Skip all dependency checks]'
	'--noextract[Do not extract source files (use existing $srcdir/ dir)]'
	'--force[Overwrite existing package]'
	'--geninteg[Generate integrity checks for source files]'
	'--help[Show help message and exit]'
	'--install[Install package after successful build]'
	'--log[Log package build process]'
	'--nocolor[Disable colorized output messages]'
	'--nobuild[Download and extract files only]'
	'--rmdeps[Remove installed dependencies after a successful build]'
	'--repackage[Repackage contents of the package without rebuilding]'
	'--syncdeps[Install missing dependencies with pacman]'
	'--source[Generate a source-only tarball without downloading sources]'
	'--version[Show version information and exit]'
	'--allsource[Generate a source-only tarball including downloaded source]'
	'--check[Run check() function in the PKGBUILD]'
	'--config[Use an alternate config file instead of '/etc/makepkg.conf']: :_files'
	'--holdver[Do not update VCS sources]'
	'--key[Specify key to use for gpg signing instead of the default]: :_keys'
	'--noarchive[Do not create package archive]'
	'--nocheck[Do not run the check() function in the PKGBUILD]'
	'--noprepare[Do not run the prepare() function in the PKGBUILD]'
	'--nosign[Do not create a signature for the package]'
	'--packagelist[Only list packages that would be produced, without PKGEXT]'
	'--printsrcinfo[Print the generated SRCINFO and exit]'
	'--sign[Sign the resulting package with gpg]'
	'--skipchecksums[Do not verify checksums of the source files]'
	'--skipinteg[do not perform any verification checks on source files]'
	'--skippgpcheck[Do not verify source files with PGP signatures]'
	'--noconfirm[Do not ask for confirmation when resolving dependencies]'
	'--asdeps[Install packages as non-explicitly installed]'
	'--noprogressbar[Do not show a progress bar when downloading files]'
	'--needed[Do not reinstall the targets that are already up to date]'
	'--verifysource[Download source files (if needed) and perform integrity checks]'
)
_makepkg() {
	case $words[CURRENT] in
		-*)
			_arguments -s -w : \
				"$_makepkg_shortopts[@]" \
				"$_makepkg_longopts[@]"
			;;
		--* )
			_arguments -s \
				"$_makepkg_longopts[@]"
			;;
		- )
			_makepkg_action_none
			;;
		*)
			i=$#
			while [[ $words[i] != -* ]] && [[ $words[$i] != "makepkg-bwrap" ]]; do
				i=$((i-1))
			done
			case $words[$i] in
				-*)
					_arguments -s -w : \
						"$_makepkg_shortopts[@]" \
						"$_makepkg_longopts[@]"
					;;
				--* )
					_arguments -s \
						"$_makepkg_longopts[@]"
					;;
				- )
					_makepkg_action_none
					;;
				* )
					return 1
					;;
			esac
			;;
	esac
}

_makepkg "$@"
